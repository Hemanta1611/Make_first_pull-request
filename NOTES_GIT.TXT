GIT NOTES

1. GIT BASH IS A TERMINAL

SOME COMMANDS: 
 i. git - used for checking git is installed or not
 ii. pwd - present working directories - command used for checking where git file is present
 iii. ls - command used for lists content
      cd - command used for goto/open any file/directory/folder in the terminal
	   (after using ls we can see the next direcory and go into it directly by :  cd dirctory_name_seen_using_ls   no need to re initialize by going to that folder
      



 iv. git config --global user.name "Hemanta"  command to create user name
 v. git config --list  
 vi. git config --global user.email "hemantabhoi16112003@gmail.com"  command to create user name
 vii. git config user.name or user.email   is used to check the given user name and email
 viii. we can rename the email and name by again providing name by same command (i.e. iv or vi)
 ix. git clone link    used for copy project using link to the directories  (link can be url of git reposatory)
 x. we can't commit direcly first we have to send it on stageing area by using command
   git add filename     then we can commit by command: git commit -m *message*  

 
 xi. git init   used for creating reposatory   or   re-initializing git reposatory
 xii. git add --a  (or) git add -A     used for adding all files and folders into a single folder 
      or we can say send all folders to staging area.
      git add filename      used for adding any perticulara file into staging area.
 13. git commit                    leads to commit and open an editor  
     git commit -m "messages.."    leads to commit and send simple message without opening of editor
 14. git log      used for seeing all the commit we have done
 15. git status    used for checking if there any changes occur in files or not 
 16. rm -rf .git     used for stop tracking and delete .git reposatory.(it will not longer a git reposatory)
 17. git clone      command used for clone using url e.g. https://github.com/tensorflow/tensorflow.git
 18. git push        command used for permanently pushing to the github reposatory


SOME KEYWORDS: 
 1. commit = it means taking snapshots of code or project 
 2. cd = change directories
 3. pwd = present working directories
 4. 





THREE STAGES ARCHITECTURE OF GIT: 
            LOCAL OPERATIONS
WORKING              STAGEING             GIT DIRECTORY
DIRECTORY            AREA                (RESPIRATORY)
|<----------------CHECK OUT THE PROJECT--------|
|                      |                       |
|---STAGE FILES------->|                       |
|                      |                       |
|                      |---------COMMIT------->|
________________________________________________





These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects







